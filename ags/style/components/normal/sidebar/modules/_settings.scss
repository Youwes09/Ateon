@use "../../../../layouts" as *;
@use "../../../../abstracts" as *;
@use "sass:color";

.matshell-settings {
  @include widget-container;
  padding: 0;
  border-radius: calc(#{$round} * 2);
  background-color: color.adjust($barBg, $lightness: if($darkmode, 1%, -1%));
}

// Compact unified header with inline navigation
.settings-header-compact {
  align-items: center;
  padding: $spacing-md $spacing-md $spacing-sm $spacing-md;
  border-bottom: 1px solid color.adjust($fg, $alpha: -0.92);
  background-color: color.adjust($barBg, $lightness: if($darkmode, 1%, -1%));

  border-top-left-radius: calc(#{$round} * 2);
  border-top-right-radius: calc(#{$round} * 2);

  .settings-title-compact {
    font-size: calc(#{$font} * 1.1);
    font-weight: 700;
    color: $fg;
    margin-right: auto;
  }
}


// Compact icon-only navigation
.settings-nav-compact {
  gap: $spacing-xs;

  .nav-icon-button {
    padding: $spacing-xs calc(#{$spacing-sm} * 1.2);
    border-radius: calc(#{$round} * 1.5);
    background-color: transparent;
    border: none;
    transition: all 150ms ease;
    min-width: 36px;

    .icon-compact {
      @include material-icon;
      font-size: calc(#{$font} * 1.3);
      color: color.adjust($fg, $alpha: -0.5);
      transition: color 150ms ease;
    }

    &:hover {
      background-color: color.adjust($fg, $alpha: -0.94);

      .icon-compact {
        color: color.adjust($fg, $alpha: -0.2);
      }
    }

    &.active {
      background-color: color.adjust($primary, $alpha: -0.88);

      .icon-compact {
        color: $primary;
      }
    }
  }
}

// Main content area
.settings-content {
  padding: $spacing-md;
  min-height: 280px;
}

// Section headers for grouping
.section-header {
  font-size: calc(#{$font} * 0.85);
  font-weight: 600;
  color: color.adjust($fg, $alpha: -0.4);
  text-transform: uppercase;
  letter-spacing: 0.05em;
  margin: $spacing-md 0 $spacing-xs 0;

  &:first-child {
    margin-top: 0;
  }
}

// Option rows
.option-row {
  background-color: color.adjust($barBg, $lightness: if($darkmode, 2%, -2%));
  border: 1px solid color.adjust($fg, $alpha: -0.92);
  border-radius: calc(#{$round} * 1.5);
  padding: calc(#{$spacing-sm} * 1.2) $spacing-md;
  margin: $spacing-xs 0;
  transition: all 150ms ease;

  @if not $darkmode {
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  &:hover {
    background-color: color.adjust($barBg, $lightness: if($darkmode, 3%, -3%));
    border-color: color.adjust($fg, $alpha: -0.88);

    @if not $darkmode {
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
    }
  }

  .option-label {
    font-size: calc(#{$font} * 0.95);
    font-weight: 500;
    color: $fg;
  }
}

// Toggle switches - compact & modern
.option-switch {
  // Exact size — no stretching
  width: 44px;
  height: 24px;
  min-width: 44px;
  min-height: 24px;
  // Fully rounded track
  border-radius: 12px;
  padding: 0;
  margin: 0;
  // GTK-specific: round focus ring
  -gtk-outline-radius: 12px;
  // Base track color
  background-color: color.adjust($fg, $alpha: -0.88);
  transition: background-color 200ms ease;

  @if not $darkmode {
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  slider {
    // Fixed size — never changes
    width: 20px;
    height: 20px;
    min-width: 20px;
    min-height: 20px;
    // Fully rounded
    border-radius: 10px;
    // Position: always 2px from top/bottom
    margin: 2px;
    // Start on the left (off state)
    margin-left: 2px;
    margin-right: 22px; // 44 - 20 - 2 - 2 = 20px space → 22px right margin to balance
    background-color: if($darkmode, color.adjust($barBg, $lightness: 8%), white);
    transition: all 200ms cubic-bezier(0.4, 0.0, 0.2, 1);
    -gtk-outline-radius: 10px;

    @if not $darkmode {
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    } @else {
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);
    }
  }

  &:checked {
    background-color: $primary;

    slider {
      background-color: white;
      // Move to right: 22px left margin, 2px right
      margin-left: 22px;
      margin-right: 2px;

      @if not $darkmode {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.25);
      }
    }
  }

  &:hover {
    background-color: color.adjust($fg, $alpha: -0.85);

    &:checked {
      background-color: color.adjust($primary, $lightness: if($darkmode, 5%, -5%));
    }
  }
}

// Select dropdowns - cleaner appearance
.option-dropdown {
  min-width: 130px;

  button {
    @include button-active;
    border-radius: calc(#{$round} * 1.2);
    padding: $spacing-xs calc(#{$spacing-sm} * 1.2);
    border: 1px solid color.adjust($fg, $alpha: -0.92);
    font-size: calc(#{$font} * 0.95);
    transition: all 150ms ease;

    @if not $darkmode {
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }

    &:hover {
      border-color: color.adjust($fg, $alpha: -0.85);
      background-color: color.adjust($barBg, $lightness: if($darkmode, 3%, -3%));

      @if not $darkmode {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
      }
    }
  }
}

// Info boxes for hints/warnings
.info-box {
  padding: calc(#{$spacing-sm} * 1.2) $spacing-md;
  border-radius: calc(#{$round} * 1.2);
  background-color: color.adjust($primary, $alpha: -0.94);
  border-left: 3px solid color.adjust($primary, $alpha: -0.6);
  margin-top: $spacing-sm;

  .info-text {
    font-size: calc(#{$font} * 0.85);
    color: color.adjust($fg, $alpha: -0.3);
    font-style: italic;
    line-height: 1.4;
  }
}

// Legacy separator support (minimal styling)
separator {
  background-color: color.adjust($fg, $alpha: -0.92);
  margin: $spacing-md 0;
  min-height: 1px;
}